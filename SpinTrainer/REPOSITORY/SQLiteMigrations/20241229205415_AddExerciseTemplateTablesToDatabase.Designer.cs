// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using REPOSITORY.DBContext;

#nullable disable

namespace REPOSITORY.SQLiteMigrations
{
    [DbContext(typeof(SQLiteDBContext))]
    [Migration("20241229205415_AddExerciseTemplateTablesToDatabase")]
    partial class AddExerciseTemplateTablesToDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("ENTITYS.ExerciseEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descrip")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("HandsPositions")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RPMMax")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RPMMin")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Descrip = "Plano Sentado",
                            HandsPositions = "1,2,2.5",
                            RPMMax = 110,
                            RPMMin = 80
                        },
                        new
                        {
                            ID = 2,
                            Descrip = "Plano de Pie / Correr",
                            HandsPositions = "2,2.5",
                            RPMMax = 110,
                            RPMMin = 80
                        },
                        new
                        {
                            ID = 3,
                            Descrip = "Saltos",
                            HandsPositions = "2,2.5",
                            RPMMax = 110,
                            RPMMin = 80
                        },
                        new
                        {
                            ID = 4,
                            Descrip = "Escalada Sentado",
                            HandsPositions = "2,2.5",
                            RPMMax = 80,
                            RPMMin = 60
                        },
                        new
                        {
                            ID = 5,
                            Descrip = "Escalada de Pie",
                            HandsPositions = "3",
                            RPMMax = 80,
                            RPMMin = 60
                        },
                        new
                        {
                            ID = 6,
                            Descrip = "Correr en Montaña",
                            HandsPositions = "2,2.5",
                            RPMMax = 80,
                            RPMMin = 60
                        },
                        new
                        {
                            ID = 7,
                            Descrip = "Saltos en Montaña",
                            HandsPositions = "2,2.5,3",
                            RPMMax = 80,
                            RPMMin = 60
                        },
                        new
                        {
                            ID = 8,
                            Descrip = "Sprints en Plano",
                            HandsPositions = "2,2.5,3",
                            RPMMax = 110,
                            RPMMin = 80
                        },
                        new
                        {
                            ID = 9,
                            Descrip = "Sprints en Montaña",
                            HandsPositions = "2,2.5,3",
                            RPMMax = 110,
                            RPMMin = 80
                        });
                });

            modelBuilder.Entity("ENTITYS.ExerciseTemplateEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DescripMov")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DurationMin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExerciseID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExerciseName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HandsPosition")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("RPMFin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RPMMed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResistancePercentage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("ExerciseTemplate");
                });

            modelBuilder.Entity("ENTITYS.SessionEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateC")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descrip")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrainerID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("ENTITYS.SessionExercisesEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DescripMov")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DurationMin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExerciseID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HandsPosition")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("RPMFin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RPMMed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResistancePercentage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SessionID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("SessionID");

                    b.ToTable("SessionExercises");
                });

            modelBuilder.Entity("ENTITYS.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateC")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateR")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateV")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descrip")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("NumberPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PIN")
                        .IsRequired()
                        .HasColumnType("varbinary(MAX)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(MAX)");

                    b.Property<short>("UserType")
                        .HasColumnType("smallint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ENTITYS.SessionExercisesEntity", b =>
                {
                    b.HasOne("ENTITYS.SessionEntity", "Session")
                        .WithMany("SessionExercises")
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("ENTITYS.SessionEntity", b =>
                {
                    b.Navigation("SessionExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
